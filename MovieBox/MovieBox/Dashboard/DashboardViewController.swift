//
//  DashboardViewController.swift
//  MovieBox
//
//  Created by Onder on 25.06.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DashboardViewDisplayLogic: class {
    func displayPopularMovies(movieListViewModel: MovieListViewModel)
    func displaySearchedMovies(movieListViewModel: MovieListViewModel)
    func displaySearchedPeople(peopleListViewModel: PeopleListViewModel)
    func displayBothSearchedPeopleAndMovie(movieListViewModel: MovieListViewModel,
                                           peopleListViewModel: PeopleListViewModel)
}

class DashboardViewController: BaseViewControlller, DashboardViewDisplayLogic {

    // MARK: Properties
    
    var interactor: DashboardViewBusinessLogic?
    var router: (NSObjectProtocol & DashboardViewRoutingLogic & DashboardViewDataPassing)?
    
    var movieListViewModel: MovieListViewModel?
    var searchedMovieListViewModel: MovieListViewModel?
    var searchedPeopleListViewModel: PeopleListViewModel?
    var hasActivePaginationServiceCall: Bool = false
    
    var isSearching: Bool = false
    var searchText: String?
    
    var collectionView: UICollectionView?
    
    // MARK: Constants
    
    enum Constants {
        static let sectionNumber: Int = 2
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Movies & People"
        
        setupCollectionView()
        
        interactor?.getPopularMovies(forpage: 1)
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = DashboardViewInteractor()
        let presenter = DashboardViewPresenter()
        let router = DashboardViewRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
       // initCollectionView()
        
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        let cv = UICollectionView(frame: .zero, collectionViewLayout: layout)
        cv.translatesAutoresizingMaskIntoConstraints = false
        cv.register(MovieCell.self, forCellWithReuseIdentifier: "cell")
        cv.register(SectionHeader.self, forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: "header")
        cv.register(ActivityIndicatorCell.self, forCellWithReuseIdentifier: "ActivityIndicatorCell")
        collectionView = cv
    }

//    private func initCollectionView() {
//        let layout = UICollectionViewFlowLayout()
//        layout.scrollDirection = .horizontal
//        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
//        collectionView.translatesAutoresizingMaskIntoConstraints = false
//        collectionView.register(CustomCell.self, forCellWithReuseIdentifier: "cell")
//    }
    
    private func setupCollectionView() {
        
        let navBarHeight = navigationController?.navigationBar.frame.height ?? CGFloat(0)
        let statusBarHeight = UIApplication.shared.statusBarFrame.height
        let total = navBarHeight + statusBarHeight
        
        let searchBar:UISearchBar = UISearchBar(frame: .zero)
        searchBar.searchBarStyle = UISearchBar.Style.default
        searchBar.placeholder = "Search movies or person"
        searchBar.isTranslucent = false
        searchBar.backgroundImage = UIImage()
        searchBar.delegate = self
        
        view.addSubview(searchBar)
        searchBar.translatesAutoresizingMaskIntoConstraints = false
        searchBar.topAnchor.constraint(equalTo: view.topAnchor, constant: total).isActive = true
        searchBar.bottomAnchor.constraint(equalTo: view.topAnchor, constant: total + 60).isActive = true
        searchBar.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        searchBar.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        
        guard let collectionView = collectionView else {
            return
        }
        view.addSubview(collectionView)
        
        collectionView.backgroundColor = .white
        collectionView.delegate = self
        collectionView.dataSource = self
        
        collectionView.topAnchor.constraint(equalTo: view.topAnchor, constant: total + 60).isActive = true
        collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        collectionView.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        collectionView.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
    }
    
    // MARK: DashboardViewDisplayLogic
    
    func displayPopularMovies(movieListViewModel: MovieListViewModel) {
        
        if self.movieListViewModel == nil || self.movieListViewModel?.items.count == 0 {
            self.movieListViewModel = movieListViewModel
        } else {
            self.movieListViewModel?.items.append(contentsOf: movieListViewModel.items)
        }
        
        hasActivePaginationServiceCall = false
        collectionView?.reloadData()
    }
    
    func displaySearchedMovies(movieListViewModel: MovieListViewModel) {
        
        if self.searchedMovieListViewModel == nil || self.searchedMovieListViewModel?.items.count == 0 {
            self.searchedMovieListViewModel = movieListViewModel
        } else {
            self.searchedMovieListViewModel?.items.append(contentsOf: movieListViewModel.items)
        }
        
        isSearching = true
        hasActivePaginationServiceCall = false
        collectionView?.reloadData()
    }
    
    func displaySearchedPeople(peopleListViewModel: PeopleListViewModel) {
        
        if self.searchedPeopleListViewModel == nil || self.searchedPeopleListViewModel?.items.count == 0 {
            self.searchedPeopleListViewModel = peopleListViewModel
        } else {
            self.searchedPeopleListViewModel?.items.append(contentsOf: peopleListViewModel.items)
        }
        
        isSearching = true
        hasActivePaginationServiceCall = false
        collectionView?.reloadData()
    }
    
    func displayBothSearchedPeopleAndMovie(movieListViewModel: MovieListViewModel,
                                           peopleListViewModel: PeopleListViewModel) {
        
        self.searchedMovieListViewModel = movieListViewModel
        
        self.searchedPeopleListViewModel = peopleListViewModel
        
        isSearching = true
        hasActivePaginationServiceCall = false
        collectionView?.reloadData()
    }
}
